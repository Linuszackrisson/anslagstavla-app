{
  "C:\\Users\\Linus\\OneDrive\\Dokument\\anslagstavla-projekt\\anslagstavla-backend": {
    "versionSfCore": null,
    "versionFramework": "4.4.0",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "default-aws-credential-resolver": "<REDACTED>",
      "self": {
        "instance": {
          "credentials": "<REDACTED>",
          "serviceConfigFile": {
            "service": "anslagstavla-api",
            "provider": {
              "name": "aws",
              "runtime": "nodejs18.x",
              "stage": "dev",
              "region": "eu-north-1",
              "environment": {
                "DYNAMODB_TABLE": "anslagstavla-api-dev"
              },
              "iamRoleStatements": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": "arn:aws:dynamodb:eu-north-1:*:table/anslagstavla-api-dev"
                }
              ],
              "iam": {
                "role": "arn:aws:iam::050451406575:role/LambdaDynamoDBUserrole"
              },
              "versionFunctions": true,
              "compiledCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "CreateMessageLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/anslagstavla-api-dev-createMessage"
                    }
                  },
                  "GetMessagesLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/anslagstavla-api-dev-getMessages"
                    }
                  },
                  "UpdateMessageLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/anslagstavla-api-dev-updateMessage"
                    }
                  },
                  "DeleteMessageLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/anslagstavla-api-dev-deleteMessage"
                    }
                  },
                  "GetMessagesByUserLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/anslagstavla-api-dev-getMessagesByUser"
                    }
                  },
                  "CreateMessageLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-north-1-c7031ab4-bfd8",
                        "S3Key": "serverless/anslagstavla-api/dev/1727084575835-2024-09-23T09:42:55.835Z/anslagstavla-api.zip"
                      },
                      "Handler": "functions/createMessage.handler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "anslagstavla-api-dev-createMessage",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "DYNAMODB_TABLE": "anslagstavla-api-dev"
                        }
                      },
                      "Role": "arn:aws:iam::050451406575:role/LambdaDynamoDBUserrole"
                    },
                    "DependsOn": [
                      "CreateMessageLogGroup"
                    ]
                  },
                  "GetMessagesLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-north-1-c7031ab4-bfd8",
                        "S3Key": "serverless/anslagstavla-api/dev/1727084575835-2024-09-23T09:42:55.835Z/anslagstavla-api.zip"
                      },
                      "Handler": "functions/getMessages.handler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "anslagstavla-api-dev-getMessages",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "DYNAMODB_TABLE": "anslagstavla-api-dev"
                        }
                      },
                      "Role": "arn:aws:iam::050451406575:role/LambdaDynamoDBUserrole"
                    },
                    "DependsOn": [
                      "GetMessagesLogGroup"
                    ]
                  },
                  "UpdateMessageLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-north-1-c7031ab4-bfd8",
                        "S3Key": "serverless/anslagstavla-api/dev/1727084575835-2024-09-23T09:42:55.835Z/anslagstavla-api.zip"
                      },
                      "Handler": "functions/updateMessage.handler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "anslagstavla-api-dev-updateMessage",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "DYNAMODB_TABLE": "anslagstavla-api-dev"
                        }
                      },
                      "Role": "arn:aws:iam::050451406575:role/LambdaDynamoDBUserrole"
                    },
                    "DependsOn": [
                      "UpdateMessageLogGroup"
                    ]
                  },
                  "DeleteMessageLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-north-1-c7031ab4-bfd8",
                        "S3Key": "serverless/anslagstavla-api/dev/1727084575835-2024-09-23T09:42:55.835Z/anslagstavla-api.zip"
                      },
                      "Handler": "functions/deleteMessage.handler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "anslagstavla-api-dev-deleteMessage",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "DYNAMODB_TABLE": "anslagstavla-api-dev"
                        }
                      },
                      "Role": "arn:aws:iam::050451406575:role/LambdaDynamoDBUserrole"
                    },
                    "DependsOn": [
                      "DeleteMessageLogGroup"
                    ]
                  },
                  "GetMessagesByUserLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-north-1-c7031ab4-bfd8",
                        "S3Key": "serverless/anslagstavla-api/dev/1727084575835-2024-09-23T09:42:55.835Z/anslagstavla-api.zip"
                      },
                      "Handler": "functions/getMessagesByUser.handler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "anslagstavla-api-dev-getMessagesByUser",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "DYNAMODB_TABLE": "anslagstavla-api-dev"
                        }
                      },
                      "Role": "arn:aws:iam::050451406575:role/LambdaDynamoDBUserrole"
                    },
                    "DependsOn": [
                      "GetMessagesByUserLogGroup"
                    ]
                  },
                  "CreateMessageLambdaVersionErtZSEv0SBrwRBN35N0UDuYwidqPaQoV6xTV18ud2Q": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "CreateMessageLambdaFunction"
                      },
                      "CodeSha256": "DEmF1Eb/chuigDiAMJor/zg1Ve+swXSjtUmLCW/7Wtw="
                    }
                  },
                  "GetMessagesLambdaVersionezBREwrPcIOe60DOILtnr2RbanRH7ncCt841Css": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetMessagesLambdaFunction"
                      },
                      "CodeSha256": "DEmF1Eb/chuigDiAMJor/zg1Ve+swXSjtUmLCW/7Wtw="
                    }
                  },
                  "UpdateMessageLambdaVersionIWSTKBxDpZpXdUOC3eYxd149r3sHhxOELwiIBZodtrU": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "UpdateMessageLambdaFunction"
                      },
                      "CodeSha256": "DEmF1Eb/chuigDiAMJor/zg1Ve+swXSjtUmLCW/7Wtw="
                    }
                  },
                  "DeleteMessageLambdaVersion9hYF6jJVcWoVdNJRM5RL2XiYAoAMxEJ6yJT6n5SKhbo": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "DeleteMessageLambdaFunction"
                      },
                      "CodeSha256": "DEmF1Eb/chuigDiAMJor/zg1Ve+swXSjtUmLCW/7Wtw="
                    }
                  },
                  "GetMessagesByUserLambdaVersionLbnMEZpIvBZRswZby6wdNJ9SGfEWHRp71jurT7ELg": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetMessagesByUserLambdaFunction"
                      },
                      "CodeSha256": "DEmF1Eb/chuigDiAMJor/zg1Ve+swXSjtUmLCW/7Wtw="
                    }
                  },
                  "ApiGatewayRestApi": {
                    "Type": "AWS::ApiGateway::RestApi",
                    "Properties": {
                      "Name": "dev-anslagstavla-api",
                      "EndpointConfiguration": {
                        "Types": [
                          "EDGE"
                        ]
                      },
                      "Policy": ""
                    }
                  },
                  "ApiGatewayResourceMessages": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "messages",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceMessagesIdVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceMessages"
                      },
                      "PathPart": "{id}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceMessagesUser": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceMessages"
                      },
                      "PathPart": "user",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceMessagesUserUsernameVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceMessagesUser"
                      },
                      "PathPart": "{username}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodMessagesOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMessages"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodMessagesIdVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMessagesIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodMessagesUserUsernameVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMessagesUserUsernameVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodMessagesPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMessages"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "CreateMessageLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "CreateMessageLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodMessagesGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMessages"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetMessagesLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetMessagesLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodMessagesIdVarPut": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "PUT",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMessagesIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "UpdateMessageLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "UpdateMessageLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodMessagesIdVarDelete": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "DELETE",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMessagesIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "DeleteMessageLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "DeleteMessageLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodMessagesUserUsernameVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMessagesUserUsernameVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetMessagesByUserLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetMessagesByUserLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayDeployment1727084571778": {
                    "Type": "AWS::ApiGateway::Deployment",
                    "Properties": {
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "StageName": "dev"
                    },
                    "DependsOn": [
                      "ApiGatewayMethodMessagesOptions",
                      "ApiGatewayMethodMessagesIdVarOptions",
                      "ApiGatewayMethodMessagesUserUsernameVarOptions",
                      "ApiGatewayMethodMessagesPost",
                      "ApiGatewayMethodMessagesGet",
                      "ApiGatewayMethodMessagesIdVarPut",
                      "ApiGatewayMethodMessagesIdVarDelete",
                      "ApiGatewayMethodMessagesUserUsernameVarGet"
                    ]
                  },
                  "CreateMessageLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "CreateMessageLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetMessagesLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetMessagesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "UpdateMessageLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "UpdateMessageLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "DeleteMessageLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "DeleteMessageLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetMessagesByUserLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetMessagesByUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "MessagesDynamoDbTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "id",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "id",
                          "KeyType": "HASH"
                        }
                      ],
                      "BillingMode": "PAY_PER_REQUEST",
                      "TableName": "anslagstavla-api-dev"
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": "serverless-framework-deployments-eu-north-1-c7031ab4-bfd8",
                    "Export": {
                      "Name": "sls-anslagstavla-api-dev-ServerlessDeploymentBucketName"
                    }
                  },
                  "CreateMessageLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "CreateMessageLambdaVersionErtZSEv0SBrwRBN35N0UDuYwidqPaQoV6xTV18ud2Q"
                    },
                    "Export": {
                      "Name": "sls-anslagstavla-api-dev-CreateMessageLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetMessagesLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetMessagesLambdaVersionezBREwrPcIOe60DOILtnr2RbanRH7ncCt841Css"
                    },
                    "Export": {
                      "Name": "sls-anslagstavla-api-dev-GetMessagesLambdaFunctionQualifiedArn"
                    }
                  },
                  "UpdateMessageLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "UpdateMessageLambdaVersionIWSTKBxDpZpXdUOC3eYxd149r3sHhxOELwiIBZodtrU"
                    },
                    "Export": {
                      "Name": "sls-anslagstavla-api-dev-UpdateMessageLambdaFunctionQualifiedArn"
                    }
                  },
                  "DeleteMessageLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "DeleteMessageLambdaVersion9hYF6jJVcWoVdNJRM5RL2XiYAoAMxEJ6yJT6n5SKhbo"
                    },
                    "Export": {
                      "Name": "sls-anslagstavla-api-dev-DeleteMessageLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetMessagesByUserLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetMessagesByUserLambdaVersionLbnMEZpIvBZRswZby6wdNJ9SGfEWHRp71jurT7ELg"
                    },
                    "Export": {
                      "Name": "sls-anslagstavla-api-dev-GetMessagesByUserLambdaFunctionQualifiedArn"
                    }
                  },
                  "ServiceEndpoint": {
                    "Description": "URL of the service endpoint",
                    "Value": {
                      "Fn::Join": [
                        "",
                        [
                          "https://",
                          {
                            "Ref": "ApiGatewayRestApi"
                          },
                          ".execute-api.",
                          {
                            "Ref": "AWS::Region"
                          },
                          ".",
                          {
                            "Ref": "AWS::URLSuffix"
                          },
                          "/dev"
                        ]
                      ]
                    },
                    "Export": {
                      "Name": "sls-anslagstavla-api-dev-ServiceEndpoint"
                    }
                  }
                }
              },
              "vpc": {}
            },
            "functions": {
              "createMessage": {
                "handler": "functions/createMessage.handler",
                "events": [
                  {
                    "http": {
                      "path": "messages",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "POST"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "anslagstavla-api-dev-createMessage",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "CreateMessageLambdaVersionErtZSEv0SBrwRBN35N0UDuYwidqPaQoV6xTV18ud2Q"
              },
              "getMessages": {
                "handler": "functions/getMessages.handler",
                "events": [
                  {
                    "http": {
                      "path": "messages",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "anslagstavla-api-dev-getMessages",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "GetMessagesLambdaVersionezBREwrPcIOe60DOILtnr2RbanRH7ncCt841Css"
              },
              "updateMessage": {
                "handler": "functions/updateMessage.handler",
                "events": [
                  {
                    "http": {
                      "path": "messages/{id}",
                      "method": "put",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "PUT"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "anslagstavla-api-dev-updateMessage",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "UpdateMessageLambdaVersionIWSTKBxDpZpXdUOC3eYxd149r3sHhxOELwiIBZodtrU"
              },
              "deleteMessage": {
                "handler": "functions/deleteMessage.handler",
                "events": [
                  {
                    "http": {
                      "path": "messages/{id}",
                      "method": "delete",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "DELETE"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "anslagstavla-api-dev-deleteMessage",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "DeleteMessageLambdaVersion9hYF6jJVcWoVdNJRM5RL2XiYAoAMxEJ6yJT6n5SKhbo"
              },
              "getMessagesByUser": {
                "handler": "functions/getMessagesByUser.handler",
                "events": [
                  {
                    "http": {
                      "path": "messages/user/{username}",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "OPTIONS",
                          "GET"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "anslagstavla-api-dev-getMessagesByUser",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "GetMessagesByUserLambdaVersionLbnMEZpIvBZRswZby6wdNJ9SGfEWHRp71jurT7ELg"
              }
            },
            "resources": {
              "Resources": {
                "MessagesDynamoDbTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "DeletionPolicy": "Retain",
                  "Properties": {
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "id",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "id",
                        "KeyType": "HASH"
                      }
                    ],
                    "BillingMode": "PAY_PER_REQUEST",
                    "TableName": "anslagstavla-api-dev"
                  }
                }
              },
              "Outputs": {}
            }
          },
          "configFileDirPath": "C:\\Users\\Linus\\OneDrive\\Dokument\\anslagstavla-projekt\\anslagstavla-backend",
          "config": {
            "type": "self"
          },
          "options": {},
          "stage": "dev",
          "dashboard": null,
          "logger": {
            "namespace": "s:core:resolver:self",
            "prefix": null,
            "prefixColor": null
          },
          "_credentialsPromise": "<REDACTED>"
        },
        "resolvers": {}
      }
    },
    "composeServiceName": null,
    "servicePath": "C:\\Users\\Linus\\OneDrive\\Dokument\\anslagstavla-projekt\\anslagstavla-backend",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "anslagstavla-api",
      "provider": {
        "name": "aws",
        "runtime": "nodejs18.x",
        "stage": "dev",
        "region": "eu-north-1",
        "environment": {
          "DYNAMODB_TABLE": "anslagstavla-api-dev"
        },
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:DeleteItem"
            ],
            "Resource": "arn:aws:dynamodb:eu-north-1:*:table/anslagstavla-api-dev"
          }
        ],
        "iam": {
          "role": "arn:aws:iam::050451406575:role/LambdaDynamoDBUserrole"
        },
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "CreateMessageLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/anslagstavla-api-dev-createMessage"
              }
            },
            "GetMessagesLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/anslagstavla-api-dev-getMessages"
              }
            },
            "UpdateMessageLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/anslagstavla-api-dev-updateMessage"
              }
            },
            "DeleteMessageLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/anslagstavla-api-dev-deleteMessage"
              }
            },
            "GetMessagesByUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/anslagstavla-api-dev-getMessagesByUser"
              }
            },
            "CreateMessageLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-north-1-c7031ab4-bfd8",
                  "S3Key": "serverless/anslagstavla-api/dev/1727084575835-2024-09-23T09:42:55.835Z/anslagstavla-api.zip"
                },
                "Handler": "functions/createMessage.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "anslagstavla-api-dev-createMessage",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "DYNAMODB_TABLE": "anslagstavla-api-dev"
                  }
                },
                "Role": "arn:aws:iam::050451406575:role/LambdaDynamoDBUserrole"
              },
              "DependsOn": [
                "CreateMessageLogGroup"
              ]
            },
            "GetMessagesLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-north-1-c7031ab4-bfd8",
                  "S3Key": "serverless/anslagstavla-api/dev/1727084575835-2024-09-23T09:42:55.835Z/anslagstavla-api.zip"
                },
                "Handler": "functions/getMessages.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "anslagstavla-api-dev-getMessages",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "DYNAMODB_TABLE": "anslagstavla-api-dev"
                  }
                },
                "Role": "arn:aws:iam::050451406575:role/LambdaDynamoDBUserrole"
              },
              "DependsOn": [
                "GetMessagesLogGroup"
              ]
            },
            "UpdateMessageLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-north-1-c7031ab4-bfd8",
                  "S3Key": "serverless/anslagstavla-api/dev/1727084575835-2024-09-23T09:42:55.835Z/anslagstavla-api.zip"
                },
                "Handler": "functions/updateMessage.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "anslagstavla-api-dev-updateMessage",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "DYNAMODB_TABLE": "anslagstavla-api-dev"
                  }
                },
                "Role": "arn:aws:iam::050451406575:role/LambdaDynamoDBUserrole"
              },
              "DependsOn": [
                "UpdateMessageLogGroup"
              ]
            },
            "DeleteMessageLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-north-1-c7031ab4-bfd8",
                  "S3Key": "serverless/anslagstavla-api/dev/1727084575835-2024-09-23T09:42:55.835Z/anslagstavla-api.zip"
                },
                "Handler": "functions/deleteMessage.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "anslagstavla-api-dev-deleteMessage",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "DYNAMODB_TABLE": "anslagstavla-api-dev"
                  }
                },
                "Role": "arn:aws:iam::050451406575:role/LambdaDynamoDBUserrole"
              },
              "DependsOn": [
                "DeleteMessageLogGroup"
              ]
            },
            "GetMessagesByUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-north-1-c7031ab4-bfd8",
                  "S3Key": "serverless/anslagstavla-api/dev/1727084575835-2024-09-23T09:42:55.835Z/anslagstavla-api.zip"
                },
                "Handler": "functions/getMessagesByUser.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "anslagstavla-api-dev-getMessagesByUser",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "DYNAMODB_TABLE": "anslagstavla-api-dev"
                  }
                },
                "Role": "arn:aws:iam::050451406575:role/LambdaDynamoDBUserrole"
              },
              "DependsOn": [
                "GetMessagesByUserLogGroup"
              ]
            },
            "CreateMessageLambdaVersionErtZSEv0SBrwRBN35N0UDuYwidqPaQoV6xTV18ud2Q": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateMessageLambdaFunction"
                },
                "CodeSha256": "DEmF1Eb/chuigDiAMJor/zg1Ve+swXSjtUmLCW/7Wtw="
              }
            },
            "GetMessagesLambdaVersionezBREwrPcIOe60DOILtnr2RbanRH7ncCt841Css": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetMessagesLambdaFunction"
                },
                "CodeSha256": "DEmF1Eb/chuigDiAMJor/zg1Ve+swXSjtUmLCW/7Wtw="
              }
            },
            "UpdateMessageLambdaVersionIWSTKBxDpZpXdUOC3eYxd149r3sHhxOELwiIBZodtrU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateMessageLambdaFunction"
                },
                "CodeSha256": "DEmF1Eb/chuigDiAMJor/zg1Ve+swXSjtUmLCW/7Wtw="
              }
            },
            "DeleteMessageLambdaVersion9hYF6jJVcWoVdNJRM5RL2XiYAoAMxEJ6yJT6n5SKhbo": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteMessageLambdaFunction"
                },
                "CodeSha256": "DEmF1Eb/chuigDiAMJor/zg1Ve+swXSjtUmLCW/7Wtw="
              }
            },
            "GetMessagesByUserLambdaVersionLbnMEZpIvBZRswZby6wdNJ9SGfEWHRp71jurT7ELg": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetMessagesByUserLambdaFunction"
                },
                "CodeSha256": "DEmF1Eb/chuigDiAMJor/zg1Ve+swXSjtUmLCW/7Wtw="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-anslagstavla-api",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceMessages": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "messages",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceMessagesIdVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceMessages"
                },
                "PathPart": "{id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceMessagesUser": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceMessages"
                },
                "PathPart": "user",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceMessagesUserUsernameVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceMessagesUser"
                },
                "PathPart": "{username}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodMessagesOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMessages"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodMessagesIdVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMessagesIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodMessagesUserUsernameVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMessagesUserUsernameVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodMessagesPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMessages"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateMessageLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CreateMessageLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodMessagesGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMessages"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetMessagesLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetMessagesLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodMessagesIdVarPut": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMessagesIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UpdateMessageLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "UpdateMessageLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodMessagesIdVarDelete": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "DELETE",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMessagesIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "DeleteMessageLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "DeleteMessageLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodMessagesUserUsernameVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMessagesUserUsernameVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetMessagesByUserLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetMessagesByUserLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1727084571778": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodMessagesOptions",
                "ApiGatewayMethodMessagesIdVarOptions",
                "ApiGatewayMethodMessagesUserUsernameVarOptions",
                "ApiGatewayMethodMessagesPost",
                "ApiGatewayMethodMessagesGet",
                "ApiGatewayMethodMessagesIdVarPut",
                "ApiGatewayMethodMessagesIdVarDelete",
                "ApiGatewayMethodMessagesUserUsernameVarGet"
              ]
            },
            "CreateMessageLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateMessageLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetMessagesLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetMessagesLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UpdateMessageLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateMessageLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DeleteMessageLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteMessageLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetMessagesByUserLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetMessagesByUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "MessagesDynamoDbTable": {
              "Type": "AWS::DynamoDB::Table",
              "DeletionPolicy": "Retain",
              "Properties": {
                "AttributeDefinitions": [
                  {
                    "AttributeName": "id",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "id",
                    "KeyType": "HASH"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST",
                "TableName": "anslagstavla-api-dev"
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-eu-north-1-c7031ab4-bfd8",
              "Export": {
                "Name": "sls-anslagstavla-api-dev-ServerlessDeploymentBucketName"
              }
            },
            "CreateMessageLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateMessageLambdaVersionErtZSEv0SBrwRBN35N0UDuYwidqPaQoV6xTV18ud2Q"
              },
              "Export": {
                "Name": "sls-anslagstavla-api-dev-CreateMessageLambdaFunctionQualifiedArn"
              }
            },
            "GetMessagesLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetMessagesLambdaVersionezBREwrPcIOe60DOILtnr2RbanRH7ncCt841Css"
              },
              "Export": {
                "Name": "sls-anslagstavla-api-dev-GetMessagesLambdaFunctionQualifiedArn"
              }
            },
            "UpdateMessageLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateMessageLambdaVersionIWSTKBxDpZpXdUOC3eYxd149r3sHhxOELwiIBZodtrU"
              },
              "Export": {
                "Name": "sls-anslagstavla-api-dev-UpdateMessageLambdaFunctionQualifiedArn"
              }
            },
            "DeleteMessageLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteMessageLambdaVersion9hYF6jJVcWoVdNJRM5RL2XiYAoAMxEJ6yJT6n5SKhbo"
              },
              "Export": {
                "Name": "sls-anslagstavla-api-dev-DeleteMessageLambdaFunctionQualifiedArn"
              }
            },
            "GetMessagesByUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetMessagesByUserLambdaVersionLbnMEZpIvBZRswZby6wdNJ9SGfEWHRp71jurT7ELg"
              },
              "Export": {
                "Name": "sls-anslagstavla-api-dev-GetMessagesByUserLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-anslagstavla-api-dev-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "createMessage": {
          "handler": "functions/createMessage.handler",
          "events": [
            {
              "http": {
                "path": "messages",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "anslagstavla-api-dev-createMessage",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "CreateMessageLambdaVersionErtZSEv0SBrwRBN35N0UDuYwidqPaQoV6xTV18ud2Q"
        },
        "getMessages": {
          "handler": "functions/getMessages.handler",
          "events": [
            {
              "http": {
                "path": "messages",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "anslagstavla-api-dev-getMessages",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetMessagesLambdaVersionezBREwrPcIOe60DOILtnr2RbanRH7ncCt841Css"
        },
        "updateMessage": {
          "handler": "functions/updateMessage.handler",
          "events": [
            {
              "http": {
                "path": "messages/{id}",
                "method": "put",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "PUT"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "anslagstavla-api-dev-updateMessage",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "UpdateMessageLambdaVersionIWSTKBxDpZpXdUOC3eYxd149r3sHhxOELwiIBZodtrU"
        },
        "deleteMessage": {
          "handler": "functions/deleteMessage.handler",
          "events": [
            {
              "http": {
                "path": "messages/{id}",
                "method": "delete",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "DELETE"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "anslagstavla-api-dev-deleteMessage",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "DeleteMessageLambdaVersion9hYF6jJVcWoVdNJRM5RL2XiYAoAMxEJ6yJT6n5SKhbo"
        },
        "getMessagesByUser": {
          "handler": "functions/getMessagesByUser.handler",
          "events": [
            {
              "http": {
                "path": "messages/user/{username}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "anslagstavla-api-dev-getMessagesByUser",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetMessagesByUserLambdaVersionLbnMEZpIvBZRswZby6wdNJ9SGfEWHRp71jurT7ELg"
        }
      },
      "resources": {
        "Resources": {
          "MessagesDynamoDbTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "TableName": "anslagstavla-api-dev"
            }
          }
        },
        "Outputs": {}
      }
    },
    "serviceRawFile": "service: anslagstavla-api\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs18.x  # Update this line\r\n  stage: dev\r\n  region: eu-north-1\r\n  environment:\r\n    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}  # Använd det exakta namnet på din manuellt skapade tabell\r\n  iamRoleStatements:\r\n    - Effect: Allow\r\n      Action:\r\n        - dynamodb:DeleteItem\r\n      Resource: \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\r\n  iam:\r\n    role: arn:aws:iam::050451406575:role/LambdaDynamoDBUserrole\r\n\r\nfunctions:\r\n  createMessage:\r\n    handler: functions/createMessage.handler\r\n    events:\r\n      - http:\r\n          path: messages\r\n          method: post\r\n          cors: true\r\n\r\n  getMessages:\r\n    handler: functions/getMessages.handler\r\n    events:\r\n      - http:\r\n          path: messages\r\n          method: get\r\n          cors: true\r\n\r\n  updateMessage:\r\n    handler: functions/updateMessage.handler\r\n    events:\r\n      - http:\r\n          path: messages/{id}\r\n          method: put\r\n          cors: true\r\n\r\n  deleteMessage:\r\n    handler: functions/deleteMessage.handler\r\n    events:\r\n      - http:\r\n          path: messages/{id}\r\n          method: delete\r\n          cors: true\r\n\r\n  getMessagesByUser:\r\n    handler: functions/getMessagesByUser.handler\r\n    events:\r\n      - http:\r\n          path: messages/user/{username}\r\n          method: get\r\n          cors: true\r\n\r\nresources:\r\n  Resources:\r\n    MessagesDynamoDbTable:\r\n      Type: 'AWS::DynamoDB::Table'\r\n      DeletionPolicy: Retain\r\n      Properties:\r\n        AttributeDefinitions:\r\n          - AttributeName: id\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: id\r\n            KeyType: HASH\r\n        BillingMode: PAY_PER_REQUEST\r\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\r\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "error": null,
    "params": {},
    "machineId": "4c6bbf77b81632e0b7f6c5a57b71b9f9",
    "stage": "dev",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "8cce41c7-ca7c-427e-aee1-a031ee88c628",
    "orgName": "linuszackrisson",
    "userId": "tGCxqzwzCFptXqyyML",
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "linuszackrisson",
    "subscription": null,
    "userEmail": "Linus.gz@hotmail.com",
    "serviceProviderAwsRegion": "eu-north-1",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "050451406575",
    "projectType": "traditional",
    "versionSf": "4.4.0",
    "serviceProviderAwsCfStackName": "anslagstavla-api-dev",
    "integrations": {},
    "serviceUniqueId": "arn:aws:cloudformation:eu-north-1:050451406575:stack/anslagstavla-api-dev/68415680-766d-11ef-b6bc-0ed9a76a8ab3",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:eu-north-1:050451406575:stack/anslagstavla-api-dev/68415680-766d-11ef-b6bc-0ed9a76a8ab3",
    "serviceProviderAwsCfStackCreated": "2024-09-19T09:56:14.902Z",
    "serviceProviderAwsCfStackUpdated": "2024-09-23T09:43:13.971Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "UpdateMessageLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-north-1:050451406575:function:anslagstavla-api-dev-updateMessage:11",
        "Description": "Current Lambda function version",
        "ExportName": "sls-anslagstavla-api-dev-UpdateMessageLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteMessageLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-north-1:050451406575:function:anslagstavla-api-dev-deleteMessage:11",
        "Description": "Current Lambda function version",
        "ExportName": "sls-anslagstavla-api-dev-DeleteMessageLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetMessagesByUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-north-1:050451406575:function:anslagstavla-api-dev-getMessagesByUser:11",
        "Description": "Current Lambda function version",
        "ExportName": "sls-anslagstavla-api-dev-GetMessagesByUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetMessagesLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-north-1:050451406575:function:anslagstavla-api-dev-getMessages:11",
        "Description": "Current Lambda function version",
        "ExportName": "sls-anslagstavla-api-dev-GetMessagesLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateMessageLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-north-1:050451406575:function:anslagstavla-api-dev-createMessage:11",
        "Description": "Current Lambda function version",
        "ExportName": "sls-anslagstavla-api-dev-CreateMessageLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://vz35nu72ha.execute-api.eu-north-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-anslagstavla-api-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-eu-north-1-c7031ab4-bfd8",
        "ExportName": "sls-anslagstavla-api-dev-ServerlessDeploymentBucketName"
      }
    ]
  }
}